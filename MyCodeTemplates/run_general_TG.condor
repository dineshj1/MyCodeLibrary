+Group="GRAD" 
+Project="AI_ROBOTICS" 
Requirements=(Machine!="vision-7.cs.utexas.edu")&&(Machine!="vision-8.cs.utexas.edu")&&(Machine !="vision-9.cs.utexas.edu")&&(Machine!="vision-10.cs.utexas.edu")&&(Machine!="vision-11.cs.utexas.edu")

# # Submit an executable # 
Environment= LD_LIBRARY_PATH=/v/filer4b/software/matlab-2011a/sys/os/glnxa64/:/lusr/share/software/matlab-2011a/bin/glnxa64/:/v/filer4b/software/matlab-2011a/runtime/glnxa64/;
Universe = vanilla 
Getenv = True 
Log = condor/log/DatTG$(Cluster)_$(Process).log 
Output = condor/op/DatTG$(Cluster)_$(Process).out 
Error = condor/err/DatTG$(Cluster)_$(Process).err 
Notification = Complete

OPfolder=/scratch/vision/dineshj/Semantic_attributes/codes/condor/Figs/
Executable=/scratch/vision/dineshj/Semantic_attributes/codes/mcc/general_TG
# Argument variables ##############################
lambdalist=[1000]
disjlambdalist=[1000]
#sharelambdalist=[1000]
muList=[100]
disjmuList=[100]
#sharemuList=[100]
w1List=[1]
w2List=[0] 
MTLlambdalist=[1e-5]
MALSARsharelambdaList=[1e-5]
MALSARlassolambdaList=[1e-5]
Lassolambdalist=[1]
Farhadi_c_list=[0.1]
logReg_cList=[1];
 
#dataset=Farhadi_PCA
#poseCluster=1
#split=2
#attriblist=6   
#hardmethod={'ExpectedLabel'}
#hardmethod={'LibLinear_lim'}
#hardmethod={'LibLinear'}

#dataset=Birds_PCA
#poseCluster=0
#split=10
#attriblist=3    

dataset=AwA_PCA
allTrain=1
split=1
attriblist=2    
poseCluster=1

#selMethodNames={'naive'}
#ttl_fields={'logReg_c'};
selMethodNames={'proplogreg','naive'}
ttl_fields={'TGLlambda','TGLmu'} 
#selMethodNames={'MALSARshare'}
#ttl_fields={'MALSARsharelambda'}  
#selMethodNames={'MALSARlasso'}
#ttl_fields={'MALSARlassolambda'}  
#selMethodNames={'farhadi'}
#ttl_fields={'Farhadi_c', 'logReg_c'}
#selMethodNames={'allsharing_TG'}
#ttl_fields={'sharelambda','sharemu'}       
#selMethodNames={'alldisjoint'}
#ttl_fields={'disjlambda','disjmu'}   
#selMethodNames={'all'}
#ttl_fields={'TGLlambda','TGLmu','TGLw1','TGLw2','MTLlambda','Lassolambda','Farhadi_c'} 

figFormat=png
hardShow=0
extraTasks=0

#overall regularizer weight
#lambdaList=[100,1000,10000]
#lambdalist=[1,3,5,7,10]
#lambdalist=[0,1e-3,1e-2,1e-1,1,1e1,1e2,1e3,1e4,1e5]
#lambdalist=[1e-3,1e-2,1e-1,1,1e1,1e2,1e3,1e4,1e5,1e6]
#lambdalist=[280,460,640,820,1000,1200,1500,2000,2500]
#lambdalist=[0.1,0.7,1,2,4,7,10,15,25,50,70,100]
lambdalist=[10,15,25,50,70,100,200,300,450,600]
#lambdalist=[0.03,1e-1,1,1e1,50,1e2,300]
#gradient descent speed?
#muList=[10,100,1000]
muList=[1e-2,1e-1,1,1e1,1e2,1e3,1e4]
#muList=[1e-4,1e-3,1e-2,1e-1,1,10,100]
#muList=[1e-5,1e-4,1e-3,1e-2,1e-1,1,10,1e2,1e3,1e4]
#muList=[1e-1,1,10,1e2,1e3,1e4,1e5]

# attribute group nodes
#w1List=[1]
# top node
#w2List=[0]

#Lassolambdalist=[1e-6,1e-5,1e-4,1e-3,1e-2,1e-1,1,1e1,1e2] 
#Lassolambdalist=[1e-5,1e-4,1e-3,1e-2,1e-1,1,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9] 

#MALSARsharelambdaList=[1e-5,1e-4,1e-3,1e-2,1e-1,1,1e1,1e2,1e3]
#MALSARsharelambdaList=[1e-4,3e-4,6e-4,10e-4,20e-4,40e-4,60e-4,80e-4,100e-4] 

#MALSARlassolambdaList=[1e-5,1e-4,1e-3,1e-2,1e-1,1,1e1,1e2,1e3] 
#MALSARlassolambdaList=[1e-5,3e-5,6e-5,10e-5,20e-5,40e-5,60e-5,80e-5,100e-5] 

#Farhadi_c_list=[1e-5,1e-4,1e-3,0.01,0.05,0.1,0.5,1,5,10,100,1000]
#Farhadi_c_list=[1e-7,1e-6,1e-5,1e-4,1e-3,0.01,0.05,0.1,1,10]

#disjlambdaList=[1e-3,1e-2,1e-1,1,1e1,1e2,1e3,1e4,1e5,1e6]
#disjmuList=[1e-4,1e-3,1e-2,1e-1,1,10,100]

#sharelambdaList=[1e-3,1e-2,1e-1,1,1e1,1e2,1e3,1e4,1e5,1e6]
#sharemuList=[1e-4,1e-3,1e-2,1e-1,1,10,100]
 
#logReg_cList=[1e-3,1e-2,1e-1,0.5,1,5,1e1,1e2,1e3];

numjobs=70
Arguments=data $(dataset) poseCluster $(poseCluster) split $(split) attriblist $(attriblist) figFormat $(figFormat) OPfolder $(OPfolder)  selMethodNames $(selMethodNames) hardShow $(hardShow) ttl_fields $(ttl_fields) lambdaList $(lambdalist) muList $(muList) w1List $(w1List) w2List $(w2List) disjlambdaList $(disjlambdaList) disjmuList $(disjmuList) MTLlambdalist $(MTLlambdalist) Lassolambdalist $(Lassolambdalist) MALSARsharelambdaList $(MALSARsharelambdaList) MALSARlassolambdaList $(MALSARlassolambdaList) Farhadi_c_list $(Farhadi_c_list) logReg_cList $(logReg_cList) cluster $(Cluster) process $(Process) extraTasks $(extraTasks) allTrain $(allTrain)
#hardmethod $(hardmethod)
#maxiter $(maxiter) thresh $(thresh) tol $(tol) L1SVM $(L1SVMargs) L2SVM $(L2SVMargs) 
Queue $(numjobs)
